---
- name: Install haproxy
  yum: name=haproxy state=present

- name: Get haproxy version
  command: bash -c "haproxy -v | grep version | awk '{ print $3 }'"
  register: haproxy_version
  changed_when: False

- name: Set haproxy version fact
  set_fact:
    haproxy_version: "{{ haproxy_version.stdout }}" 

- name: Install socat
  yum: name=socat state=present

- name: install OCSP update tool
  copy: src=hapos-upd dest=/usr/local/sbin/ mode=0755

- name: Create haproxy socket dir
  file: path=/var/lib/haproxy state=directory owner=haproxy group=haproxy mode=0755

- name: create haproxy config directories
  file: dest=/etc/haproxy/{{ item.name }} state=directory owner=haproxy group=haproxy mode=0700
  with_items: "{{ haproxy_applications }}"

- name: Create combined key and certificate file for HAproxy
  copy: content="{{ item.key_content }}{{lookup('file', '{{ inventory_dir }}/files/certs/{{ item.crt_name }}')}}" dest=/etc/haproxy/{{ item.name }}/{{ item.name }}.pem mode=0600
  with_items: "{{ haproxy_applications }}"
  when: not item.hidden
  register: keys_changed
  notify: restart haproxy instances with changed keys

- name: Chown SSL certificates
  file: path=/etc/haproxy/{{ item.name }}/{{ item.name }}.pem mode=0600
  with_items: "{{ haproxy_applications }}"
  when: not item.hidden

- name: Create directory to store backend CA file
  file: dest=/etc/pki/haproxy state=directory mode=0755 owner=root
  
- name: Copy backend CA certificate
  copy: content="{{ lookup('file', '{{ inventory_dir }}/files/certs/backend.{{ base_domain }}_ca.pem') }}" dest="{{ tls_backend_ca }}" mode=0644 owner=root
  when: haproxy_backend_tls

- name: Run hapos-upd for initial OCSP responses
  shell: /usr/local/sbin/hapos-upd --skip-update --good-only --socket /var/lib/haproxy/{{ item.name }}.stats --VAfile /etc/haproxy/{{ item.name }}/{{ item.name }}.pem --cert /etc/haproxy/{{ item.name }}/{{ item.name }}.pem
  with_items: "{{ haproxy_applications }}"
  when: not item.hidden

- name: create haproxy instance global config file
  template: src=haproxy_global.cfg.j2 dest=/etc/haproxy/{{ item.name }}/haproxy_global_{{ item.name }}.cfg
  with_items: "{{ haproxy_applications }}"
  register: configs_changed
  notify: restart haproxy instances with changed configs

- name: create haproxy instance frontend config file
  template: src=haproxy_frontend_multiple.cfg.j2 dest=/etc/haproxy/{{ item.name }}/haproxy_frontend_{{ item.name }}.cfg
  with_items: "{{ haproxy_applications }}"
  register: configs_changed
  notify: restart haproxy instances with changed configs

- name: create haproxy instance backend config file
  template: src=haproxy_backend_multiple.cfg.j2 dest=/etc/haproxy/{{ item.name }}/haproxy_backend_{{ item.name }}.cfg
  with_items: "{{ haproxy_applications }}"
  register: configs_changed
  notify: restart haproxy instances with changed configs

- name: copy systemd startup file
  template: src=haproxy_systemd_multiple.j2 dest=/etc/haproxy/{{ item.name }}/haproxy_{{ item.name }}.service
  with_items: "{{ haproxy_applications }}"
  register: systemd_changed
  notify: reload systemd

- name: enable systemd startup
  command: systemctl enable /etc/haproxy/{{ item.name }}/haproxy_{{ item.name }}.service
  register: haproxy_enable_service
  with_items: "{{ haproxy_applications }}"
  changed_when: "'Created symlink' in haproxy_enable_service.stderr"

- name: start services 
  service: name=haproxy_{{item.name }} enabled=yes state=started
  with_items: "{{ haproxy_applications }}"

- name: disable standard systemd haproxy instance
  command: systemctl disable haproxy

- name: install OCSP periodic update script
  template: src=update_ocsp.j2 dest=/usr/local/sbin/update_ocsp mode=0755

- cron: name="update ocsp info" special_time=hourly job="/usr/local/sbin/update_ocsp"

- name: stop haproxy instance
  service: name=haproxy_{{ item.name }} state=stopped
  with_items: "{{ haproxy_removal_applications }}"
  failed_when: false
  tags: haproxy_remove_apps

- name: disable systemd startup file
  command: systemctl disable /etc/haproxy/{{ item.name }}/haproxy_{{ item.name }}.service
  with_items: "{{ haproxy_removal_applications }}"
  failed_when: false
  tags: haproxy_remove_apps

- name: remove haproxy config directories
  file: dest=/etc/haproxy/{{ item.name }} state=absent
  with_items: "{{ haproxy_removal_applications }}"
  failed_when: false
  tags: haproxy_remove_apps
